from typing import Any, Optional

def bytelen(a: Any): ...
def bytedata(a: Any): ...

long_to_short: Any
short_to_long: Any

def check_acceptable_input_type(data: Any, allow64: Any) -> None: ...
def str64(s: Any): ...
def unstr64(i: Any): ...
def check_infos(data: Any, infos: Any, required_infos: Optional[Any] = ...): ...
def encode_header(a: Any, info: str = ...): ...
def decode_header(h: Any): ...
def encode_list(l: Any, infos: Optional[Any] = ...): ...
def decode_list(l: Any, infos: bool = ...): ...

magic_str: str
magic: Any
magic_bytes: Any

def roundup(n: Any, k: int = ...): ...
def encode_chunks(l: Any): ...
def decode_chunks(buf: Any): ...
def encode_buffer(l: Any, infos: Optional[Any] = ...): ...
def decode_buffer(buf: Any, infos: bool = ...): ...
def write_chunk(stream: Any, buf: Any) -> None: ...
def read_chunk(stream: Any): ...
def write(stream: Any, l: Any, infos: Optional[Any] = ...) -> None: ...
def read(stream: Any, n: int = ..., infos: bool = ...): ...
def save(fname: Any, *args: Any, infos: Optional[Any] = ..., nocheck: bool = ...) -> None: ...
def load(fname: Any, infos: bool = ..., nocheck: bool = ...): ...
def zsend_single(socket: Any, l: Any, infos: Optional[Any] = ...): ...
def zrecv_single(socket: Any, infos: bool = ...): ...
def zsend_multipart(socket: Any, l: Any, infos: Optional[Any] = ...): ...
def zrecv_multipart(socket: Any, infos: bool = ...): ...
def sctp_send(socket: Any, dest: Any, l: Any, infos: Optional[Any] = ...) -> None: ...
def sctp_recv(socket: Any, infos: bool = ..., maxsize: int = ...): ...
