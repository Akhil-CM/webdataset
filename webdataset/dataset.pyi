from . import autodecode as autodecode, dbcache as dbcache, iterators as iterators, shardcache as shardcache, tariterators as tariterators, utils as utils
from .mock import DataLoader as DataLoader, IterableDataset as IterableDataset
from .utils import lookup_sym as lookup_sym, reraise_exception as reraise_exception, safe_eval as safe_eval
from .workerenv import split_by_node as split_by_node, split_by_worker as split_by_worker
from typing import Any, Optional

default_cache_dir: Any
default_cache_name: Any
default_cache_verbose: Any
default_cache_size: Any

class MockDataset(IterableDataset):
    sample: Any = ...
    length: Any = ...
    def __init__(self, sample: Any, length: Any) -> None: ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...

class Composable:
    def __init__(self) -> None: ...
    source: Any = ...
    def source_(self, source: Any): ...
    def then(self, f: Any, *args: Any, length: bool = ..., **kw: Any): ...
    def compose(self, constructor: Any, *args: Any, **kw: Any): ...

class ShardList(IterableDataset, Composable):
    shuffle: Any = ...
    length: Any = ...
    nodesplitter: Any = ...
    splitter: Any = ...
    urls: Any = ...
    def __init__(self, urls: Any, shuffle: bool = ..., nodesplitter: bool = ..., splitter: bool = ..., length: Optional[Any] = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...

class BatchedLength:
    batchsize: Any = ...
    partial: Any = ...
    def __init__(self, batchsize: Any, partial: bool) -> None: ...
    def __call__(self, length: Any): ...

class Shorthands:
    def batched(self, batchsize: Any, collation_fn: Any = ..., partial: bool = ...): ...
    def unbatched(self, length: Optional[Any] = ...): ...
    def shuffle(self, size: Any, **kw: Any): ...
    def map(self, f: Any, handler: Any = ...): ...
    def decode(self, *args: Any, pre: Optional[Any] = ..., post: Optional[Any] = ..., only: Optional[Any] = ..., handler: Any = ...): ...
    def rename(self, handler: Any = ..., **kw: Any): ...
    def map_dict(self, handler: Any = ..., **kw: Any): ...
    def select(self, predicate: Any, **kw: Any): ...
    def to_tuple(self, *args: Any, handler: Any = ...): ...
    def map_tuple(self, *args: Any, handler: Any = ...): ...
    def pipe(self, f: Any, *args: Any, **kw: Any): ...
    def dbcache(self, fname: Any, size: Any): ...
    def slice(self, *args: Any): ...
    def repeat(self, nepochs: Optional[Any] = ..., nbatches: Optional[Any] = ..., nsamples: Optional[Any] = ..., batchsize: Any = ...): ...
    def test(self, length: Optional[Any] = ..., checker: Optional[Any] = ..., mock_sample: Optional[Any] = ..., mock_length: Optional[Any] = ..., mock: bool = ...): ...
    def ddp_equalize(self, length: Any): ...

class Repeatedly(IterableDataset, Composable, Shorthands):
    length: Any = ...
    nepochs: Any = ...
    nbatches: Any = ...
    nsamples: Any = ...
    batchsize: Any = ...
    def __init__(self, nepochs: Optional[Any] = ..., nbatches: Optional[Any] = ..., nsamples: Optional[Any] = ..., batchsize: Optional[Any] = ..., length: Optional[Any] = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...

class Processor(IterableDataset, Composable, Shorthands):
    source: Any = ...
    f: Any = ...
    args: Any = ...
    kw: Any = ...
    length: Any = ...
    def __init__(self, source: Any, f: Any, *args: Any, _kwa: Any = ..., length: bool = ..., **kw: Any) -> None: ...
    def source_(self, source: Any): ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...

def WebDataset(urls: Any, shardshuffle: bool = ..., cache_dir: Any = ..., cache_size: Any = ..., cache_name: Any = ..., cache_verbose: Any = ..., splitter: Any = ..., nodesplitter: bool = ..., handler: Any = ..., length: Optional[Any] = ...): ...
def WebLoader(*args: Any, **kw: Any): ...

class DatasetTest(IterableDataset, Composable, Shorthands):
    source: Any = ...
    length: Any = ...
    checker: Any = ...
    mock: Any = ...
    mock_length: Any = ...
    mock_sample: Any = ...
    def __init__(self, length: Optional[Any] = ..., checker: Optional[Any] = ..., mock_sample: Optional[Any] = ..., mock_length: int = ..., mock: bool = ...) -> None: ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...

class ChoppedDataset(IterableDataset):
    dataset: Any = ...
    length: Any = ...
    nominal: Any = ...
    source: Any = ...
    def __init__(self, dataset: Any, length: Optional[Any] = ..., nominal: Optional[Any] = ...) -> None: ...
    def __len__(self): ...
    def __iter__(self) -> Any: ...
ResizedDataset = ChoppedDataset
