from . import gopen as gopen
from typing import Any, Optional

def imageencoder(image: Any, format: str = ...): ...
def bytestr(data: Any): ...
def torch_dumps(data: Any): ...
def make_handlers(): ...

default_handlers: Any

def encode_based_on_extension1(data: Any, tname: Any, handlers: Any): ...
def encode_based_on_extension(sample: Any, handlers: Any): ...
def make_encoder(spec: Any): ...

class TarWriter:
    own_fileobj: Any = ...
    encoder: Any = ...
    keep_meta: Any = ...
    stream: Any = ...
    tarstream: Any = ...
    user: Any = ...
    group: Any = ...
    mode: Any = ...
    compress: Any = ...
    def __init__(self, fileobj: Any, user: str = ..., group: str = ..., mode: int = ..., compress: Optional[Any] = ..., encoder: bool = ..., keep_meta: bool = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_val: Any, exc_tb: Any) -> None: ...
    def close(self) -> None: ...
    def dwrite(self, key: Any, **kw: Any) -> None: ...
    def write(self, obj: Any): ...

class ShardWriter:
    verbose: int = ...
    kw: Any = ...
    maxcount: Any = ...
    maxsize: Any = ...
    post: Any = ...
    tarstream: Any = ...
    shard: Any = ...
    pattern: Any = ...
    total: int = ...
    count: int = ...
    size: int = ...
    fname: Any = ...
    def __init__(self, pattern: Any, maxcount: int = ..., maxsize: float = ..., post: Optional[Any] = ..., start_shard: int = ..., **kw: Any) -> None: ...
    def next_stream(self) -> None: ...
    def write(self, obj: Any) -> None: ...
    def finish(self) -> None: ...
    def close(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args: Any, **kw: Any) -> None: ...
